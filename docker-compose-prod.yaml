volumes:
  app_data:
  postgres_data:
  grafana_data:

services:
  frontend:
    build: ./frontend
    container_name: ${FRONTEND_CONTAINER_NAME}
    ports:
      - "${FRONTEND_PORT}:${FRONTEND_PORT}"
    restart: unless-stopped
    networks:
      - app-network

  backend:
    build: ./backend
    container_name: ${BACKEND_CONTAINER_NAME}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - app_data:/data
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - DATABASE_URL=${DATABASE_URL}
      - ADMIN_USER=${ADMIN_USER}
      - ADMIN_PASS=${ADMIN_PASS}
      - ADMIN_EMAIL=${ADMIN_EMAIL}
      - SECRET_KEY=${SECRET_KEY}
    depends_on:
      - postgres
        # condition: service_healthy
    restart: unless-stopped
    ports:
      - "${BACKEND_PORT}:${BACKEND_PORT}"
    networks:
      - app-network
  nginx:
    build: ./nginx
    container_name: ${NGINX_CONTAINER_NAME}
    restart: unless-stopped
    ports:
      - "${NGINX_HTTP_PORT}:${NGINX_HTTP_PORT}"
      - "${NGINX_HTTPS_PORT}:${NGINX_HTTPS_PORT}"
      - "${NGINX_STREAM_PORT_RANGE}:${NGINX_STREAM_PORT_RANGE}/tcp"
      - "${NGINX_STREAM_PORT_RANGE}:${NGINX_STREAM_PORT_RANGE}/udp"
    volumes:
      # Mount the entire app_data volume to /data
      - app_data:/data
    networks:
      - app-network

  nginx-exporter:
    image: nginx/nginx-prometheus-exporter:${NGINX_EXPORTER_VERSION}
    container_name: ${NGINX_EXPORTER_CONTAINER_NAME}
    command: -nginx.scrape-uri=http://nginx:8081/nginx_status
    ports:
      - "${NGINX_EXPORTER_PORT}:${NGINX_EXPORTER_PORT}" # Exporter default port
    networks:
      - app-network
    depends_on:
      - nginx # Ensure NGINX is up before exporter starts

  postgres:
    image: postgres:${POSTGRES_VERSION}
    container_name: ${POSTGRES_CONTAINER_NAME}
    restart: unless-stopped
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - DATABASE_URL=${DATABASE_URL}
  ai-agent:
    build: ./ai-agent
    container_name: ${AI_AGENT_CONTAINER_NAME}
    environment:
      PROMETHEUS_URL: "${PROMETHEUS_URL}"
      API_TOKEN: "${AI_AGENT_API_TOKEN}"
      SCRAPE_INTERVAL_SEC: "${AI_AGENT_SCRAPE_INTERVAL_SEC}"
      METRIC_QUERY: "${AI_AGENT_METRIC_QUERY}"
      LOOKBACK_MINUTES: "${AI_AGENT_LOOKBACK_MINUTES}"
    networks:
      - app-network
    ports:
      - "${AI_AGENT_PORT}:${AI_AGENT_PORT}"  # optional: expose to host if you want to browse; keep internal if you prefer

  prometheus:
    image: prom/prometheus:${PROMETHEUS_VERSION}
    container_name: ${PROMETHEUS_CONTAINER_NAME}
    volumes:
      - ./prometheus/ai-agent-scrap.yaml:/etc/prometheus/prometheus.yml
    command: --config.file=/etc/prometheus/prometheus.yml
    ports:
      - "${PROMETHEUS_PORT}:${PROMETHEUS_PORT}"
    networks:
      - app-network

  grafana:
    image: grafana/grafana:${GRAFANA_VERSION}
    container_name: ${GRAFANA_CONTAINER_NAME}
    ports:
      - "${GRAFANA_PORT}:${GRAFANA_PORT}"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
    depends_on:
      - prometheus
    networks:
      - app-network

networks:
  app-network:
    driver: bridge
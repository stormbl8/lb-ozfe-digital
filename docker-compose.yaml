volumes:
  app_data:
  postgres_data:
  grafana_data:

services:
  frontend:
    build: ./frontend
    container_name: lb-ui-frontend
    ports:
      - "88:88"
    restart: unless-stopped
    networks:
      - app-network

  backend:
    build: ./backend
    container_name: lb-ui-backend
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - app_data:/data
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - DATABASE_URL=${DATABASE_URL}
      - ADMIN_USER=${ADMIN_USER}
      - ADMIN_PASS=${ADMIN_PASS}
      - ADMIN_EMAIL=${ADMIN_EMAIL}
      - SECRET_KEY=${SECRET_KEY}
    depends_on:
      - postgres
    restart: unless-stopped
    ports:
      - "8000:8000"
    networks:
      - app-network
  nginx:
    build: ./nginx
    container_name: nginx-proxy
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
      - "10000-10100:10000-10100/tcp"
      - "10000-10100:10000-10100/udp"
    volumes:
      # Mount the entire app_data volume to /data
      - app_data:/data
    networks:
      - app-network

  nginx-exporter:
    image: nginx/nginx-prometheus-exporter:0.11.0 # Use a specific version
    container_name: nginx-exporter
    command: -nginx.scrape-uri=http://nginx:8081/nginx_status
    ports:
      - "9113:9113" # Exporter default port
    networks:
      - app-network
    depends_on:
      - nginx # Ensure NGINX is up before exporter starts

  postgres:
    image: postgres:15-alpine
    container_name: lb-ui-postgres
    restart: unless-stopped
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - DATABASE_URL=${DATABASE_URL}
  ai-agent:
    build: ./ai-agent
    container_name: ai-agent
    environment:
      PROMETHEUS_URL: "http://prometheus:9090"
      API_TOKEN: "replace-with-a-strong-token"
      SCRAPE_INTERVAL_SEC: "30"
      METRIC_QUERY: 'sum(rate(nginx_http_requests_total[5m]))'
      LOOKBACK_MINUTES: "10"
    networks:
      - app-network
    ports:
      - "5000:5000"  # optional: expose to host if you want to browse; keep internal if you prefer

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./prometheus/ai-agent-scrap.yaml:/etc/prometheus/prometheus.yml
    command: --config.file=/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - app-network

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    depends_on:
      - prometheus
    networks:
      - app-network

networks:
  app-network:
    driver: bridge
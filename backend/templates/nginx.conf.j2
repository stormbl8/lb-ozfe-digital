# Managed by Load Balancer UI for: {{ service.domain_name }}

# GSLB configuration for geo-based routing if enabled
{% if gslb_service_config and gslb_service_config.load_balancing_algorithm == 'geo' %}
map $geoip2_country_code $gslb_pool_{{ gslb_service_config.id }} {
    default {{ gslb_service_config.geoip_map.default_datacenter_id }};
    {% for mapping in gslb_service_config.geoip_map.mappings %}
    {{ mapping.country_code }} {{ mapping.datacenter_id }};
    {% endfor %}
}
{% endif %}

# HTTP server block for redirection to HTTPS
{% if service.force_ssl %}
server {
    listen 80;
    server_name {{ service.domain_name }};
    location / {
        return 301 https://$host$request_uri;
    }
}
{% endif %}

# Main server block
server {
    {% if not service.force_ssl %}
    listen 80;
    {% endif %}

    listen 443 ssl;
    {% if service.http2_support %}
    http2 on;
    {% endif %}

    server_name {{ service.domain_name }};
    # Enable ModSecurity WAF if the service requires it
    {% if service.waf_enabled %}
    modsecurity on;
    modsecurity_rules_file /etc/nginx/waf/modsecurity.conf;
    {% endif %}

    # Access Control
    {% if service.access_list_ips %}
        {% for ip in service.access_list_ips %}
            {% if ip.strip() %}
        {{ service.access_list_type }} {{ ip.strip() }};
        {% endif %}
        {% endfor %}
        deny all;
    {% endif %}

    # Basic Authentication
    {% if service.basic_auth_user %}
        auth_basic "Restricted Area";
        auth_basic_user_file /data/htpasswd/service_{{ service.id }};
    {% endif %}

    # SSL Configuration
    ssl_certificate $ssl_certificate_path;
    ssl_certificate_key $ssl_certificate_key_path;

    # Advanced Rate Limiting
    {% if service.rate_limiting_enabled %}
        {% if service.rate_limiting_type == 'requests' %}
    limit_req zone=mylimit rate={{ service.rate_limiting_rate }} burst={{ service.rate_limiting_burst }}{% if service.rate_limiting_nodelay %} nodelay{% endif %};
        {% elif service.rate_limiting_type == 'connections' %}
    limit_conn per_ip {{ service.rate_limiting_connections }};
        {% endif %}
    {% endif %}

    # HSTS Header
    {% if service.hsts_enabled %}
    add_header Strict-Transport-Security "max-age=31536000{% if service.hsts_subdomains %}; includeSubDomains{% endif %}" always;
    {% endif %}

    # Path-based routing rules
    {% for rule in service.path_routing_rules %}
    location {{ rule.path }} {
        {% if app_settings.rate_limiting.enabled %}
        limit_req zone=mylimit burst={{ app_settings.rate_limiting.burst }} nodelay;
        {% endif %}
        proxy_pass {{ service.forward_scheme }}://pool_{{ rule.target_pool_id }};
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        {% if service.websockets_support %}
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        {% endif %}
        {% if service.sticky_sessions_enabled %}
        proxy_cookie_path / "/; HttpOnly; Secure; SameSite=Lax"; # Adjust path and attributes as needed
        {% endif %}
        # No advanced_config here, as it applies to the whole service
    }
    {% endfor %}

    location / {
        {% if app_settings.rate_limiting.enabled %}
        limit_req zone=mylimit burst={{ app_settings.rate_limiting.burst }} nodelay;
        {% endif %}
        proxy_pass {{ service.forward_scheme }}://pool_{{ pool.id }};
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        {% if service.websockets_support %}
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        {% endif %}
        {{ service.advanced_config | safe }}
    }
}